use saransh_training;

select *from fact;
select *from product;
select *from location;




1) Display number of states present in location table?

select count(distinct state) from location;


2) How many products are of regular type ?

select count(product) as products_count from product where type='regular';


3) How much spending has been done on marketing of product id 1
select productid ,sum(marketing)as total_on_marketing from fact where productid=1 group by productid;

4) What is the minimum sales of a product ?

select min(sales)as minimum_sales from fact ;

5) Display max Cost of Good Sold(COGS). 
select max(cogs) from fact;

6) Display the Details of the productid where product type is coffee

select *from product where product_type ='coffee';


7) Display the details where total_expenses is greater than 40.

select *from fact where total_expenses >40;


8) What is the average sales in Area_Code 719 ?

select avg(sales) from fact where area_code=719;
9) Find out the total profit generated by Colorado state. 

select *from location;
select *from fact;

select sum(profit) as total_profit_colorado from fact inner join location on fact.area_code=location.area_code where state ='colorado';
10) Display the average inventory for each product id. 

select productid ,avg(inventory) from fact group by productid;
11) Display state in a sequential order in a location table. 
select state from location order by state;

12) Display the average budget margin where average budget margin should be greater than 100

select avg(budget_margin) as avg_budget from fact  group by productid having avg(budget_margin) >100;
13) What is the total sales done on date 2010-01-01
select *from fact;
select *from product;
select *from location;

select sum(sales) as total_sales_for_jan from fact  where date='2010-01-01';



14) Display the average total expense of each product id on individual date
select productid,avg(total_expenses) from fact group by productid , date;


15) Display the table with the following attributes such as Date, productid, product_type, product, Sales, profit, state, area_code
select *from fact;
select *from product;
select *from location;

select f.date,
       f.productid,
	   p.product_Type,
	   p.product,
	   f.sales,
	   f.profit,
	   l.state,
	   l.Area_code

	   from fact f inner join product p on f.productid=p.productid
	                inner join location l on f.area_code=l.area_code;


16) Display the rank without any gap to show the Sales wise rank. 

select sales,dense_rank() over (order by sales asc) as rank_salary from fact;
17) Find the State wise Profit and Sales. 
select *from fact;
select *from product;
select *from location;


select state,sum(profit) as profit ,sum(sales) as sales from fact inner join location on fact.area_code=location.area_code group by state;
                                                                                                     


18) Find the State wise Profit and Sales along with the Product Name.
select *from fact;
select *from product;
select *from location;


select state,product, sum(profit) as profit ,sum(sales) as sales from fact inner join product on fact.productid=product.productid   inner join location on fact.area_code=location.area_code  group by product,state ;
                                                                   


19) If there is an increase in sales of 5%. Calculate the increased sales. 
select sum(sales*0.05) as total_sales from fact; 
20) Find the maximum profit along with the Product id and Product Type. 
select max(profit) from fact inner join product on fact.productid=product.productid group by fact.productid ;


21) Create a Stored Procedure to fetch the result according to the product type fromProduct.
select *from product;

create procedure producttype_result @product_type varchar(20)
as 
select *from product where Product_Type=@product_type 
go
exec producttype_result  @product_type='coffee';


22) Write a query by creating a condition in which if the total expenses is less than 60 thenit is a profit or else loss. 
select *from fact;
select *from product;
select *from location;

select Total_Expenses, iif(Total_Expenses <60,'PROFIT','LOSS') AS STATUS from FACT  ;

23) Give the total weekly sales value with the Date and productid details. Use roll-up to pull thedata in hierarchical order. 

select date, productid,sum(sales) as total_sales from fact group by date,productid with rollup;
24) Apply union and intersection operator on the tables which consist of attribute area code. 
select area_code from fact union select area_code from location;
select area_code from fact intersect select area_code from location;

25) Create a user-defined function for the product table to fetch a particular product typebasedupon the user’s preference. 

create function fetch_type (@type char(30))
returns table
as
return
(
select *from Product where Product_Type=@type
)

select *from dbo.fetch_type('coffee');

26) Change the product type from coffee to tea where product id is 1 and undo it.
select *from fact;
select *from product;
select *from location;

begin transaction
update Product set Product_Type='Tea' where ProductId=1

rollback transaction;

27) Display the Date, productid and sales where total expenses are between 100 to 200. 

select date,productid,sales from fact where total_expenses between 100 and 200;





28) Delete the records in the product table for regular type. 

select *from product;

delete from Product
where Type='Regular';


29) Display the ASCII value of the fifth character from the column product.
select *from product;

select ASCII(substring(product,5,1)) as ASCII_Value from Product;
